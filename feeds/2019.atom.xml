<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mamady Nabé - 2019</title><link href="http://mamadyonline.github.io/" rel="alternate"></link><link href="http://mamadyonline.github.io/feeds/2019.atom.xml" rel="self"></link><id>http://mamadyonline.github.io/</id><updated>2019-06-10T00:00:00+02:00</updated><entry><title>Building a data pipeline: from python objects to a database</title><link href="http://mamadyonline.github.io/building-a-data-pipeline-from-python-objects-to-a-database-en.html" rel="alternate"></link><published>2019-06-10T00:00:00+02:00</published><updated>2019-06-10T00:00:00+02:00</updated><author><name>Mamady Nabé</name></author><id>tag:mamadyonline.github.io,2019-06-10:/building-a-data-pipeline-from-python-objects-to-a-database-en.html</id><summary type="html">&lt;p&gt;There are many ways to store data. There are text files, CSVs (Comma Separated Values), excel tables and so on. They all have their pros and cons. But in this blog post, I am going to talk about one server-based database: Postgres.&lt;/p&gt;
&lt;p&gt;I will walk you through the installation of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are many ways to store data. There are text files, CSVs (Comma Separated Values), excel tables and so on. They all have their pros and cons. But in this blog post, I am going to talk about one server-based database: Postgres.&lt;/p&gt;
&lt;p&gt;I will walk you through the installation of a working environment and a complete example of how one can go from python objects to a database.&lt;/p&gt;
&lt;h2&gt;What are the needs ?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A library that can convert objects to a data structure understandable by databases, this is called an &lt;a href="https://en.wikipedia.org/wiki/Object-relational_mapping"&gt;ORM&lt;/a&gt; (Object Relational Mapper). For this we will use the python library &lt;a href="https://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt;. It does more than just translating objects from python to databases' data structures, it abstracts away many low level concepts such as connection, querying, and it offers several ways to interact with databases.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using SQLAlchemy efficiently leads to more readable and easy-to-maintain code. A downside though, I think, is, it is not advisable to use it when we want to learn about SQL. Even though it offers the possibility to work with raw SQL queries.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A database where we'll store our data for later ease of access and querying. Rather than installing the full fledge PostgreSQl, we are going to use a dockerized version of it. &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; makes software installation very easy and takes away all the pain that comes often with installing softwares.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All you need is to have it installed on your machine. For installation guide, go &lt;a href="https://docs.docker.com/install/"&gt;here&lt;/a&gt;. And to get the docker, this &lt;a href="https://hackernoon.com/dont-install-postgres-docker-pull-postgres-bee20e200198"&gt;medium post&lt;/a&gt; does a good job.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A python Data base API for communicating with PostgreSQl. You can find a list of options &lt;a href="https://wiki.python.org/moin/PostgreSQL"&gt;here&lt;/a&gt;. For this post, we are going to use &lt;a href="http://initd.org/psycopg/docs/"&gt;psycopg2&lt;/a&gt;. SQLAlchemy needs this to properly communicate with the Postgres database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Optional] A virtual env which will contain only the necessary packages and where we'll do all the programming work.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="PostgreSQL" src="/images/postgresql.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;SQLAlchemy ORM core concepts&lt;/h2&gt;
&lt;p&gt;At its core, there are &lt;a href="https://docs.sqlalchemy.org/en/11/core/engines.html"&gt;Engines&lt;/a&gt;. As mentioned on the official website, it is the starting point for any SQLAlchemy application. It contains all the necessary stuffs to interact with a DBAPI (for those interested, you can find &lt;a href="https://www.python.org/dev/peps/pep-0249/"&gt;here&lt;/a&gt;, the full operations for the Python DBAPI) by making them accessible anytime there is a need.&lt;/p&gt;
&lt;p&gt;Another core concept for the SQLAlchemy ORM is &lt;strong&gt;Session&lt;/strong&gt;. It is very a convenient technical solution that makes the data persistence easy enough to avoid the user manually reporting all the changes to the created objects. All the queries are dealt with through sessions. For that purpose, it needs to have connection established with the database all the time, and whenever you want to affect changes to existing data or to evaluate queries, a simple notification sent is enough (through an implementation of the DBAPI &lt;em&gt;commit&lt;/em&gt; or &lt;em&gt;rollback&lt;/em&gt;). It thus works in common with the Engine.&lt;/p&gt;
&lt;p&gt;The final concept I would like to talk about before getting to the practice is Table. Creating tables via the SQLAlchemy ORM is as easy as creating classes. The only thing to do is to inherit from a base class which notifies SQLAlchemy that the class should be treated as the definition of a database table.&lt;/p&gt;
&lt;p&gt;&lt;img alt="SQLAlchemy logo" src="/images/sqlalchemy.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;A complete walk through an example&lt;/h2&gt;
&lt;p&gt;The example project will consist of storing some information about football players in a Postgres database using the SQLAlchemy ORM. To do this I created a project with the following structure:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Project folder structure" src="/images/data_eng_folder_struct.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a base file where are defined the configurations: Engine, Session and models base class.&lt;/li&gt;
&lt;li&gt;a model file where is defined the table for players.&lt;/li&gt;
&lt;li&gt;a class containing useful queries for our needs.&lt;/li&gt;
&lt;li&gt;a fake player generator file using a very useful library: &lt;a href="https://faker.readthedocs.io/en/stable/"&gt;Faker&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first thing to do is to define the configurations to use in order to communicate with the database. Here is the code which does that:&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/bd1533fd0461d995cc9a6554fce3ac87.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;"""This code creates:

* a SQLAlchemy Engine that will interact with our dockerized PostgreSQL database,
* a SQLAlchemy ORM session factory bound to this engine,
* a base class for our classes definitions.
"""

from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

POSTGRES_USER = 'postgres'
POSTGRES_PASSWORD = 'docker'
POSTGRES_HOST = 'localhost'
POSTGRES_PORT = 5432
db_name = 'postgres'
DATABASE_URI = f'postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}' \
    f'@{POSTGRES_HOST}:{POSTGRES_PORT}/'

# create the postgres database engine
data_base = create_engine(f'{DATABASE_URI}{db_name}')

# make a session binding to the database in a global scope
Session = sessionmaker(data_base)

# Base class for all the models.
Base = declarative_base()
&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;After doing that, we can now define the table associated to players in a declarative way.&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/2a0693908e2e6d99fa5dba106238ce7c.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;"""Create players class and define its characteristics"""

from data_engineering.database.base import Base
from sqlalchemy import String, Integer, Column, Boolean


class Player(Base):
    __tablename__ = 'players'

    id = Column(Integer, primary_key=True)
    name = Column('name', String)
    nationality = Column('nationality',String)
    club = Column('club', String)  # current if still active, last club if retired
    total_scored_goals = Column('total_scored_goals', Integer)
    total_personal_trophies = Column('total_personal_goals', Integer)
    active = Column('active', Boolean)

    def __init__(self, name, nationality, club,
                 total_scored_goals, total_personal_trophies, active):
        """Initialize without the id component as it is taken care of automatically."""
        self.name = name
        self.nationality = nationality
        self.club = club
        self.total_scored_goals = total_scored_goals
        self.total_personal_trophies = total_personal_trophies
        self.active = active

    def __repr__(self):
        """Prettify when we print a player"""
        if self.active:
            to_print = f"&lt;Player({self.name} from {self.nationality}, " \
                f"currently playing at {self.club} with {self.total_scored_goals} goals)&gt;"
        else:
            to_print = f"&lt;Player({self.name} from {self.nationality}, " \
                f"retired while at {self.club}) with {self.total_scored_goals} goals&gt;"
        return to_print
&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;Now we can define all the operations we want to handle through SQLAlchemy on the database (currently on the &lt;em&gt;players&lt;/em&gt; table). This is a class containing some of the operations we can do.&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/49b2d753b836a45eba6bd3707b78915e.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;"""Class defining some queries for the database via SQLAlchemy"""
from typing import List

from data_engineering.database.base import Base, Session, data_base
from data_engineering.database.players import Player


class DataBase:

    def __init__(self):
        # create a session and register players table
        self.session = Session()
        Base.metadata.create_all(data_base)

    def drop_all(self):
        self.session.query(Player).delete()
        self.session.commit()

    def add_new_player(self, player: Player):
        self.session.add(player)
        self.session.commit()

    def add_players(self, players: List[Player]):
        for player in players:
            self.session.add(player)
        self.session.commit()

    def read_all(self):
        return self.session.query(Player).all()

    def delete_entry(self, player):
        self.session.query(Player).filter(Player == player).delete()
        self.session.commit()

    def get_players_from_club(self, club: str = 'Barcelona'):
        players = self.session.query(Player).filter(Player.club == club).all()
        return players

    def delete_players_from_club(self, club: str = 'PSG'):
        self.session.query(Player).filter(Player.club == club).delete()
        self.session.commit()

    def get_top_scorers(self):
        top_scorers = self.session.query(Player).filter(Player.total_scored_goals &gt;= 600).all()
        return top_scorers

    def close(self):
        self.session.close()
&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;All this done, for tests purpose and to be able to store many players still avoiding the tedious work to create all of them by hand, we need a data generator.&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/ad96e0bfebd418248b1a062b18088221.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;from faker import Faker
import random

COUNTRIES = ['Argentina', 'Portugal', 'France', 'Brazil', 
             'England', 'Belgium', 'Italy', 'Spain', 'Germany',
             'Ivory coast', 'Guinea', 'Senegal', 'Ghana', 
             'Nigeria', 'Cameroun', 'Egypt', 'Morocco', 'Algeria',
             'USA', 'Croatia', 'Sweden', 'Columbia', 'Netherlands', 
             'Danemark', 'Ireland', 'Switzerland']

CLUBS = ['Barcelona', 'Real Madrid', 'Juventus', 'Liverpool', 
         'Ajax', 'Totenham', 'PSG', 'Lyon', 'Napoli',
         'Olympique de Marseille', 'Valence FC', 
         'Manchester United', 'Manchester City', 'Chealsea', 
         'Athlético Madrid', 'Bayern de Munich', 'Dortmund', 
         'Arsenal', 'AC Milan', 'Roma', 'Inter', 'Monaco', 'Sevilla']

fake = Faker()


def generate_fake_player():
    d = dict()
    d['name'] = lambda: fake.name_male()
    d['nationality'] = lambda: random.choice(COUNTRIES)
    d['club'] = lambda: random.choice(CLUBS)
    d['total_scored_goals'] = lambda: random.randint(0, 700)
    d['total_personal_trophies'] = lambda: random.randint(0, 20)
    d['active'] = lambda: random.choice([False, True])
    return {k: d[k]() for k in d.keys()}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;It is now very easy to test all these. Of course, for this to work, the Postgres should be accessible.&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/5b4b787cb421ab37bfc86c037e363607.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;"""Test data base module"""
import unittest

from data_engineering.database.fake_players import generate_fake_player
from data_engineering.database.players import Player
from data_engineering.database.postgres_db import DataBase


class TestDB(unittest.TestCase):
    def setUp(self) -&gt; None:
        """Instantiate a class to work with"""
        self.postgres = DataBase()

    def tearDown(self) -&gt; None:
        """empty table and close connection"""
        self.postgres.drop_all()
        self.postgres.close()

    def test_insert_one_player(self):
        """Insert one player"""
        messi = Player(name='Lionel Messi', nationality='Argentina',
                       club='Barcelona', total_scored_goals=686,
                       total_personal_trophies=15, active=True)
        self.postgres.add_new_player(messi)
        db_content = [player for player in self.postgres.read_all()]
        self.assertEqual(1, len(db_content))
        self.assertEqual(messi, db_content[0])

    def test_insert_more_than_one_player(self):
        # create players
        messi = Player(name='Lionel Messi', nationality='Argentina',
                       club='Barcelona', total_scored_goals=686,
                       total_personal_trophies=15, active=True)
        cristiano = Player(name='Cristiano Ronaldo', nationality='Portugal',
                           club='Juventus', total_scored_goals=680,
                           total_personal_trophies=18, active=True)
        players = [messi, cristiano]
        NB = 1000
        fake_players = [generate_fake_player() for _ in range(NB)]
        players.extend([Player(**player) for player in fake_players])
        # add them all
        self.postgres.add_players(players)
        db_content = [player for player in self.postgres.read_all()]
        self.assertEqual(NB + 2, len(db_content))
        self.assertEqual(messi, db_content[0])
        self.assertEqual(cristiano, db_content[1])

        # get players from Barcelona: should contain at least Messi
        barca_players = [b_p for b_p in self.postgres.get_players_from_club('Barcelona')]
        self.assertGreaterEqual(len(barca_players), 1)
        self.assertIn(messi, barca_players)

        # get top scorers: should contain at least Messi and Cristiano
        top_scorers = [t_p for t_p in self.postgres.get_top_scorers()]
        self.assertGreaterEqual(len(top_scorers), 2)
        self.assertIn(messi, top_scorers)
        self.assertIn(cristiano, top_scorers)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this blog, we looked at some concepts of ORM and dive into a practical session using the python library &lt;em&gt;SQLAlchemy&lt;/em&gt; to interact with a &lt;em&gt;Postgres&lt;/em&gt; database to manipulate a model of football players. We saw how powerful the SQLAlchemy ORM is and how clean it makes the code, avoiding all the intricacies of raw SQL queries.&lt;/p&gt;
&lt;p&gt;Now that we have some data available in a database, the next step is to build a data flow around this using a tool such as &lt;a href="https://beam.apache.org/"&gt;apache beam&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I really hope you enjoyed this, don't hesitate to send comments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: All the code is available on my Github &lt;a href="https://github.com/mamadyonline/data_engineering"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="database"></category><category term="data engineering"></category><category term="postgresql"></category><category term="data science"></category></entry><entry><title>My abroad experience so far !</title><link href="http://mamadyonline.github.io/my-abroad-experience-so-far.html" rel="alternate"></link><published>2019-05-28T00:00:00+02:00</published><updated>2019-05-28T00:00:00+02:00</updated><author><name>Mamady Nabé</name></author><id>tag:mamadyonline.github.io,2019-05-28:/my-abroad-experience-so-far.html</id><summary type="html">&lt;p&gt;I have been a student abroad since my first year of university. This goes back to september of 2012.&lt;/p&gt;
&lt;p&gt;What this means is that, at that age, I had to leave my country, my family, my friends, my routines. And get on board for an unpredictable voyage, where I would …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have been a student abroad since my first year of university. This goes back to september of 2012.&lt;/p&gt;
&lt;p&gt;What this means is that, at that age, I had to leave my country, my family, my friends, my routines. And get on board for an unpredictable voyage, where I would have to build everything again. I would have to adapt myself to the new environment, I would have to find new friends, I would have to immerse in a new culture. All these are, at the same time, terrifying and marvelous.&lt;/p&gt;
&lt;p&gt;At the core of this voyage, something guided me. The search for a better education, the discovery of the person I am, the preparation of a better life, the exposure to more opportunities.&lt;/p&gt;
&lt;p&gt;It is common that we fear the unknown at some point. I am no exception. At first, I dreaded all the difficulties that will go with the new adventure. But in my case, it was not a complete mystery since I found help from some people who did the same path as I did.&lt;/p&gt;
&lt;p&gt;I will share some points that I learned on the way.&lt;/p&gt;
&lt;h3&gt;See the unknowns as a way to grow.&lt;/h3&gt;
&lt;p&gt;We like to get too much used to things we know as it gives us a sense of certainty in the outcomes of the things we undertake. But I think that when young, it is more important to optimize for growth, and this means that to go out there and face those unknowns. Sure the outcomes are not certain, but if done properly, you will always come out strong, with more knowledge.&lt;/p&gt;
&lt;p&gt;After completing my final year of high school, I had the opportunity to go for a study in Morocco. It was an intensive program dedicated to taking in as much as possible of mathematics, physics and chemistry. I never heard about such a program before. In fact, in my country we don't have any program alike.&lt;/p&gt;
&lt;p&gt;So the question was, would it be worth it. I knew my love for those subjects for sure, but I had no idea about the outcomes before getting on board. To my great pleasure, this opened many doors to me. I took it as a challenge, and I confess it was hard, but it was really worth it. It changed me to the best. The work ethics. High achievable expectations. The methodology of work. Great aquaintances. And various other cool things.&lt;/p&gt;
&lt;h3&gt;Learn everything you can about the culture of the new place.&lt;/h3&gt;
&lt;p&gt;Nothing is more enriching than learning new ways of seeing the world. I like open-minded people. They are tolerant and they understand the importance of not seeing views as absolute. Immersing in the new culture shows how the same matter can be thought of differently accross places. In fact, there can be as many views as there are countries on a given topic. Of course, there are some things which are shared the same way accross the world, like playing sports (think about how the football brings people together during the world cup).&lt;/p&gt;
&lt;p&gt;Engaging with locals is enriching and refreshing. It gives us different perspective. And this leads to the next point.&lt;/p&gt;
&lt;h3&gt;Expand your network&lt;/h3&gt;
&lt;p&gt;Do I even need to stress this much. The value of networking is invaluable. Family, friends, mentors, think about how they make you a better person. There is this quote of &lt;em&gt;Joe Apfelbaum&lt;/em&gt; I like very much:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Behind every succesful person, there are many succesful relationships.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Start building your network as early as possible. And be relentless about it. In fact every new relationship can take you a step further towards your ultimate goal. Cherish your relationships. Give your best and never see it in a one way. &lt;em&gt;Reid Hoffman&lt;/em&gt; put it better:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your network is the people who want to help you, and you want to help them, and that's really powerful.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A good network is worthy of millions and even more. Don't play short on it. And what an occasion it is to connect with people of your new place.&lt;/p&gt;
&lt;h3&gt;Learn about the values of being alone. On your own.&lt;/h3&gt;
&lt;p&gt;Some people feel at ease with this whereas some are not. Being on your own is not always easy. But learning about its virtues, it can take you a long way. I have a complete take on this on my Quora profile, if you are interested you can find it here: &lt;a href="https://www.quora.com/If-you-can-give-me-only-one-tip-to-improve-my-life-what-would-it-be/answer/Mamady-Nab%C3%A9"&gt;On the value of learning to be alone&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;To finish, all this is good, but it is dangerous to get on board if you can't afford it financially. Of course, situations are different and there is no fit-all answer for everyone. But if you can, prepare the trip mindfully and make sure it won't make you miserable.&lt;/p&gt;
&lt;p&gt;And it can be important to stay true to yourself as long as your discoveries do not affect you negatively. For example, engaging too much in the foreign culture can lead to unpredictable outcomes. Usually, in the process of discovering oneself, it can happen that we agree more with some foreign principles than the ones of our own. This can create some duality as it can become hard to hold some thoughts you had before. But is it not true that any principle which we don't hold enough can be a burden to our happiness?&lt;/p&gt;
&lt;p&gt;This is the end of this post, and sure, there is much more to going abroad than what is summarized here.
Thanks for reading and do not hesitate to share it.&lt;/p&gt;</content><category term="abroad"></category><category term="experience"></category><category term="foreign"></category><category term="culture"></category></entry></feed>